<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_entity</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///  states

_gravity = 1
_velocity = 5
_jumping = 10
_direction = 0
_ladder = 0

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// variables

// Velocity
vx = 0;
vy = 0;

// Used for sub-pixel movement
cx = 0;
cy = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handling

kLeft        = keyboard_check(vk_left);
kRight       = keyboard_check(vk_right);
kUp          = keyboard_check(vk_up);
kDown        = keyboard_check(vk_down);
kJump        = keyboard_check_pressed(vk_up);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// logics

var kLeft, kRight;
var vxNew, vyNew;

// direction velocity
_direction = -kLeft + kRight

_ladder = -kUp + kDown 

if place_meeting(x,y,oParLadder) {
    vy = _ladder * 1
}

vx = _direction * _velocity

if !place_meeting(x,y,oParLadder) {
   // gravity
    vy += _gravity;
}

// jumping on solid and way
if ((place_meeting(x, y + 1,oParSolid) or (place_meeting(x, y + 1,oParWay) and vy &gt; 0) or (place_meeting(x, y + 1,oParLadder) and vy &gt; 0) ) and kJump) {
    vy = - _jumping
}

cx += vx;
cy += vy;
vxNew = round(cx);
vyNew = round(cy);
cx -= vxNew;
cy -= vyNew;

// Vertical
repeat(abs(vyNew)) {

   

    var instance = instance_place(x, y + sign(vyNew), oParWay)
    var ladder  = instance_place(x,y + sign(vyNew), oParLadder)
    
    if (!(place_meeting(x,y + sign(vyNew),oParSolid) or 
         (place_meeting(x,y + sign(vyNew),oParWay) and bbox_bottom &lt; instance.bbox_top ) or 
         (place_meeting(x, y + sign(vyNew),oParLadder) and _ladder &lt; 1 and bbox_bottom &lt; ladder.bbox_top ))) {
            y += sign(vyNew); 
    } else {
        vy = 0;
        break;
    }
  

}

// Horizontal
repeat(abs(vxNew)) {

    // Move up slope
    if (place_meeting(x + sign(vxNew), y, oParSolid) &amp;&amp; !place_meeting(x + sign(vxNew), y - 1, oParSolid))
        --y;
    
    // Move down slope
    if (!place_meeting(x + sign(vxNew), y, oParSolid) &amp;&amp; !place_meeting(x + sign(vxNew), y + 1, oParSolid) &amp;&amp; place_meeting(x + sign(vxNew), y + 2, oParSolid))
        ++y; 

    if (!place_meeting(x + sign(vxNew), y, oParSolid))
        x += sign(vxNew); 
    else {
        vx = 0;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
